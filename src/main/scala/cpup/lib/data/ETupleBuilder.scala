package cpup.lib.data

import scala.language.higherKinds

trait Rewrapper[SW[_], RW[_]] {
	def rewrap[T](s: SW[T]): RW[T]
}

class ETupleBuilder[W[_]] {
	trait ETuple[T] {
		def value: W[T]
		def get = value
		def rest: Option[ETuple[_]]
		def tuple: Product
		def arity: Int

		def ~[NT](next: W[NT]): ETuple[NT]

		def realArity: Int = realArity(1)
		def realArity(acc: Int): Int = rest match {
			case Some(rest) =>
				rest.realArity(acc + 1)

			case None =>
				acc
		}
	}

	case class ETuple1[T1](value: W[T1]) extends ETuple[T1] {
		def rest = None
		def tuple = Tuple1(value)
		def mapAll[R](f: (W[T1]) => R) = f(value)
		def arity = 1
		def ~[NT](next: W[NT]) = ETuple2(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(value))
	}

	def apply[T1](v1: W[T1]) = ETuple1(v1)

	case class ETuple2[T1, T2](header: ETuple1[T1], value: W[T2]) extends ETuple[T2] {
		def rest = Some(header)
		def tuple = (header.value, value)
		def mapAll[R](f: (W[T1], W[T2]) => R) = f(header.value, value)
		def arity = 2
		def ~[NT](next: W[NT]) = ETuple3(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2](v1: W[T1], v2: W[T2]) = ETuple2(ETuple1(v2), v1)

	case class ETuple3[T1, T2, T3](header: ETuple2[T1, T2], value: W[T3]) extends ETuple[T3] {
		def rest = Some(header)
		def tuple = (header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3]) => R) = f(header.header.value, header.value, value)
		def arity = 3
		def ~[NT](next: W[NT]) = ETuple4(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3](v1: W[T1], v2: W[T2], v3: W[T3]) = ETuple3(ETuple2(ETuple1(v3), v2), v1)

	case class ETuple4[T1, T2, T3, T4](header: ETuple3[T1, T2, T3], value: W[T4]) extends ETuple[T4] {
		def rest = Some(header)
		def tuple = (header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4]) => R) = f(header.header.header.value, header.header.value, header.value, value)
		def arity = 4
		def ~[NT](next: W[NT]) = ETuple5(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4]) = ETuple4(ETuple3(ETuple2(ETuple1(v4), v3), v2), v1)

	case class ETuple5[T1, T2, T3, T4, T5](header: ETuple4[T1, T2, T3, T4], value: W[T5]) extends ETuple[T5] {
		def rest = Some(header)
		def tuple = (header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5]) => R) = f(header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 5
		def ~[NT](next: W[NT]) = ETuple6(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5]) = ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v5), v4), v3), v2), v1)

	case class ETuple6[T1, T2, T3, T4, T5, T6](header: ETuple5[T1, T2, T3, T4, T5], value: W[T6]) extends ETuple[T6] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6]) => R) = f(header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 6
		def ~[NT](next: W[NT]) = ETuple7(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6]) = ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v6), v5), v4), v3), v2), v1)

	case class ETuple7[T1, T2, T3, T4, T5, T6, T7](header: ETuple6[T1, T2, T3, T4, T5, T6], value: W[T7]) extends ETuple[T7] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7]) => R) = f(header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 7
		def ~[NT](next: W[NT]) = ETuple8(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7]) = ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v7), v6), v5), v4), v3), v2), v1)

	case class ETuple8[T1, T2, T3, T4, T5, T6, T7, T8](header: ETuple7[T1, T2, T3, T4, T5, T6, T7], value: W[T8]) extends ETuple[T8] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8]) => R) = f(header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 8
		def ~[NT](next: W[NT]) = ETuple9(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8]) = ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9](header: ETuple8[T1, T2, T3, T4, T5, T6, T7, T8], value: W[T9]) extends ETuple[T9] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9]) => R) = f(header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 9
		def ~[NT](next: W[NT]) = ETuple10(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9]) = ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10](header: ETuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9], value: W[T10]) extends ETuple[T10] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10]) => R) = f(header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 10
		def ~[NT](next: W[NT]) = ETuple11(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10]) = ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11](header: ETuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10], value: W[T11]) extends ETuple[T11] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11]) => R) = f(header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 11
		def ~[NT](next: W[NT]) = ETuple12(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11]) = ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12](header: ETuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11], value: W[T12]) extends ETuple[T12] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 12
		def ~[NT](next: W[NT]) = ETuple13(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12]) = ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13](header: ETuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12], value: W[T13]) extends ETuple[T13] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12], W[T13]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 13
		def ~[NT](next: W[NT]) = ETuple14(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12], v13: W[T13]) = ETuple13(ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v13), v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14](header: ETuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13], value: W[T14]) extends ETuple[T14] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12], W[T13], W[T14]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 14
		def ~[NT](next: W[NT]) = ETuple15(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12], v13: W[T13], v14: W[T14]) = ETuple14(ETuple13(ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v14), v13), v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15](header: ETuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14], value: W[T15]) extends ETuple[T15] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12], W[T13], W[T14], W[T15]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 15
		def ~[NT](next: W[NT]) = ETuple16(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12], v13: W[T13], v14: W[T14], v15: W[T15]) = ETuple15(ETuple14(ETuple13(ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v15), v14), v13), v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16](header: ETuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15], value: W[T16]) extends ETuple[T16] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12], W[T13], W[T14], W[T15], W[T16]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 16
		def ~[NT](next: W[NT]) = ETuple17(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12], v13: W[T13], v14: W[T14], v15: W[T15], v16: W[T16]) = ETuple16(ETuple15(ETuple14(ETuple13(ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v16), v15), v14), v13), v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17](header: ETuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16], value: W[T17]) extends ETuple[T17] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12], W[T13], W[T14], W[T15], W[T16], W[T17]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 17
		def ~[NT](next: W[NT]) = ETuple18(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12], v13: W[T13], v14: W[T14], v15: W[T15], v16: W[T16], v17: W[T17]) = ETuple17(ETuple16(ETuple15(ETuple14(ETuple13(ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v17), v16), v15), v14), v13), v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18](header: ETuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17], value: W[T18]) extends ETuple[T18] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12], W[T13], W[T14], W[T15], W[T16], W[T17], W[T18]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 18
		def ~[NT](next: W[NT]) = ETuple19(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12], v13: W[T13], v14: W[T14], v15: W[T15], v16: W[T16], v17: W[T17], v18: W[T18]) = ETuple18(ETuple17(ETuple16(ETuple15(ETuple14(ETuple13(ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v18), v17), v16), v15), v14), v13), v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19](header: ETuple18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18], value: W[T19]) extends ETuple[T19] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12], W[T13], W[T14], W[T15], W[T16], W[T17], W[T18], W[T19]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 19
		def ~[NT](next: W[NT]) = ETuple20(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12], v13: W[T13], v14: W[T14], v15: W[T15], v16: W[T16], v17: W[T17], v18: W[T18], v19: W[T19]) = ETuple19(ETuple18(ETuple17(ETuple16(ETuple15(ETuple14(ETuple13(ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v19), v18), v17), v16), v15), v14), v13), v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20](header: ETuple19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19], value: W[T20]) extends ETuple[T20] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12], W[T13], W[T14], W[T15], W[T16], W[T17], W[T18], W[T19], W[T20]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 20
		def ~[NT](next: W[NT]) = ETuple21(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12], v13: W[T13], v14: W[T14], v15: W[T15], v16: W[T16], v17: W[T17], v18: W[T18], v19: W[T19], v20: W[T20]) = ETuple20(ETuple19(ETuple18(ETuple17(ETuple16(ETuple15(ETuple14(ETuple13(ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v20), v19), v18), v17), v16), v15), v14), v13), v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21](header: ETuple20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20], value: W[T21]) extends ETuple[T21] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12], W[T13], W[T14], W[T15], W[T16], W[T17], W[T18], W[T19], W[T20], W[T21]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 21
		def ~[NT](next: W[NT]) = ETuple22(this, next)
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12], v13: W[T13], v14: W[T14], v15: W[T15], v16: W[T16], v17: W[T17], v18: W[T18], v19: W[T19], v20: W[T20], v21: W[T21]) = ETuple21(ETuple20(ETuple19(ETuple18(ETuple17(ETuple16(ETuple15(ETuple14(ETuple13(ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v21), v20), v19), v18), v17), v16), v15), v14), v13), v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)

	case class ETuple22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22](header: ETuple21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21], value: W[T22]) extends ETuple[T22] {
		def rest = Some(header)
		def tuple = (header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def mapAll[R](f: (W[T1], W[T2], W[T3], W[T4], W[T5], W[T6], W[T7], W[T8], W[T9], W[T10], W[T11], W[T12], W[T13], W[T14], W[T15], W[T16], W[T17], W[T18], W[T19], W[T20], W[T21], W[T22]) => R) = f(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.header.value, header.header.header.header.header.header.header.value, header.header.header.header.header.header.value, header.header.header.header.header.value, header.header.header.header.value, header.header.header.value, header.header.value, header.value, value)
		def arity = 22
		def ~[NT](next: W[NT]) = throw new RuntimeException("Cannot go more than 22")
		def map[RW[_]](mapper: Rewrapper[W, RW])(implicit rBuilder: ETupleBuilder[RW]) = rBuilder(mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.header.value), mapper.rewrap(header.header.header.header.header.value), mapper.rewrap(header.header.header.header.value), mapper.rewrap(header.header.header.value), mapper.rewrap(header.header.value), mapper.rewrap(header.value), mapper.rewrap(value))
	}

	def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22](v1: W[T1], v2: W[T2], v3: W[T3], v4: W[T4], v5: W[T5], v6: W[T6], v7: W[T7], v8: W[T8], v9: W[T9], v10: W[T10], v11: W[T11], v12: W[T12], v13: W[T13], v14: W[T14], v15: W[T15], v16: W[T16], v17: W[T17], v18: W[T18], v19: W[T19], v20: W[T20], v21: W[T21], v22: W[T22]) = ETuple22(ETuple21(ETuple20(ETuple19(ETuple18(ETuple17(ETuple16(ETuple15(ETuple14(ETuple13(ETuple12(ETuple11(ETuple10(ETuple9(ETuple8(ETuple7(ETuple6(ETuple5(ETuple4(ETuple3(ETuple2(ETuple1(v22), v21), v20), v19), v18), v17), v16), v15), v14), v13), v12), v11), v10), v9), v8), v7), v6), v5), v4), v3), v2), v1)
}